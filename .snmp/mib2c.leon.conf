## -*- c -*-
######################################################################
## Do the .h file
######################################################################
@open mib_${name}.h@
#ifndef $name.uc_H
#define $name.uc_H

#include "snmp_var.h"

/* scalar */
@eval $magic = 0@
@foreach $i scalar@
    @eval $magic = $magic + 1@
#define $i.uc		$magic
@end@

@foreach $i table@
/* $i */
 @eval $magic = 0@
 @foreach $c column@
    @eval $magic = $magic + 1@
#define $c.uc		$magic
 @end@

@end@

/* function declarations */
u_char *     var_${name}(register struct variable *vp, register oid *name, register size_t *length, int exact, size_t *var_len, varWriteFunc_t *write_method);
int     newWrite_${name}(int action, netsnmp_request_info *varBinds, netsnmp_request_info **retVarBind);

@foreach $i table@
u_char *     var_${i}(register struct variable *vp, register oid *name, register size_t *length, int exact, size_t *var_len, varWriteFunc_t *write_method);
int     newWrite_${i}(int action, netsnmp_request_info *varBinds, netsnmp_request_info **retVarBind);

@end@

#endif /* $name.uc_H */
######################################################################
## Do the .c file
######################################################################
@open mib_${name}.c@
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "mib_${name}.h"

unsigned char *
var_$name(
	struct  variable *vp, 
	oid     *name, 
	size_t  *length, 
	int     exact, 
	size_t  *var_len, 
	varWriteFunc_t *write_method)
{
	int result;
	
	vp->name[vp->namelen] = 0;
	result = compare(name, *length, vp->name, vp->namelen + 1);
	if ((exact && (result != 0)) || (!exact && (result >= 0)))
		return NULL;
	memcpy(name, vp->name, (vp->namelen + 1) * sizeof(oid));
	*length = vp->namelen + 1;

	*write_method = (varWriteFunc_t)newWrite_$name;
	switch(vp->magic) {
	/*
	case _EXAMPLE_:
		global_return.long_return = 1;
		*var_len = sizeof(global_return.long_return);
		return (u_char *)&global_return;
	*/
@foreach $i scalar@
	case $i.uc:
		return (u_char*) 0;

@end@
	default:
		//ERROR_MSG("");
		*write_method = NULL;
		break;
	}
	return NULL;
}

int
newWrite_$name(
	int action,
	netsnmp_request_info *varBinds,
	netsnmp_request_info **retVarBind)
{
	netsnmp_request_info *varBind;
	//char *str;

	for (varBind = varBinds; varBind; varBind = varBind->multiWriteNext)
	{
		*retVarBind = varBind;
		//str = (char *)varBind->requestvb->val.string;

		switch (varBind->requestvb->magic)
		{
@foreach $i scalar@
		case $i.uc:
			break;

@end@
		default:
			break;
		}
	}

	return SNMP_ERR_NOERROR;
}

@foreach $i table@
unsigned char *
var_$i(
	struct variable *vp,
	oid     *name,
	size_t  *length,
	int     exact,
	size_t  *var_len,
	WriteMethod **write_method)
{
	//oid newname[MAX_NAME_LEN];
	//int result;
	//int key, index, found;

	/* find the data by searching indices of table entry.
	 * if found, update OID (name and length), set write_method, var_len, and return pointer of data
	 * if not found, return NULL 
	 */

	*write_method = (varWriteFunc_t)newWrite_$i;
	switch(vp->magic) {
	/*
	case _EXAMPLE_:
		global_return.long_return = 1;
		*var_len = sizeof(global_return.long_return);
		return (u_char *)&global_return;
	*/
@foreach $c column@
	case $c.uc:
		return (u_char*) 0;

@end@
	default:
		//ERROR_MSG("");
		*write_method = NULL;
		break;
	}
	return NULL;
}

int
newWrite_$i(
	int action, 
	netsnmp_request_info *varBinds, 
	netsnmp_request_info **retVarBind)
{
	netsnmp_request_info *varBind;
	//char *str;

	for (varBind = varBinds; varBind; varBind = varBind->multiWriteNext)
	{
		*retVarBind = varBind;
		//str = (char *)varBind->requestvb->val.string;

		switch (varBind->requestvb->magic)
		{
@foreach $c column@
		case $c.uc:
			break;

@end@
		default:
			break;
		}
	}

	return SNMP_ERR_NOERROR;
}

@end@
######################################################################
## Do the tbl file
######################################################################
@open mib_${name}_tbl.c@
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "mib_${name}.h"

@eval $maxoid = 0@
@foreach $i scalar@
 @eval $suffixlen = $i.oidlength - $name.oidlength@
 @if $suffixlen > $maxoid@
  @eval $maxoid = $suffixlen@
 @end@
@end@
@foreach $i table@
 @eval $suffixlen = $i.oidlength - $name.oidlength + 2@
 @if $suffixlen > $maxoid@
  @eval $maxoid = $suffixlen@
 @end@
@end@

struct _variable$maxoid {
    u_char          magic;      /* passed to function as a hint */
    u_char          type;       /* type of variable */
    u_short         acl;        /* access control list for variable */
    FindVarMethod  *findVar;    /* function that finds variable */
    u_char          namelen;    /* length of name below */
    oid             name[$maxoid];    /* object identifier of variable */
};

/*  magic number        , variable type , ro/rw , callback fn  , L, oidsuffix */
struct _variable$maxoid ${name}_variables[] = {
/* scalar */
@eval $namelen = length("$name.commaoid")@
@foreach $i scalar@
    @eval $suffix = substr("$i.commaoid", $namelen + 1)@
    @eval $suffixlen = $i.oidlength - $name.oidlength@
	@eval $rwmode = RONLY@
	@if $i.settable@
	@eval $rwmode = RWRITE@
    @end@
{$i.uc, $i.type, $rwmode, var_${name}, $suffixlen, { $suffix }},
@end@

@foreach $i table@
/* $i */
 @eval $nlen2 = length("$i.commaoid")@
 @if $nlen2 > $namelen@
  @eval $suffix = substr("$i.commaoid", $namelen + 1)@
  @eval $ctmp = ","@
 @else@
  @eval $suffix = ""@
  @eval $ctmp = ""@
 @end@
 @eval $suffixlen = $i.oidlength - $name.oidlength + 2@
 @foreach $c column@
	@eval $rwmode = RONLY@
	@if $c.settable@
	@eval $rwmode = RWRITE@
    @end@
    @if $c.syntax eq "RowStatus"@
    @eval $rwmode = $rwmode . "|ROWSTATUS"@
    @end@
{$c.uc, $c.type, $rwmode, var_${i}, $suffixlen, { $suffix $ctmp 1, $c.subid }},
 @end@

@end@
};

oid ${name}_variables_oid[] = { $name.commaoid };

/** Initializes the $name module */
void
init_mib_$name(void)
{
    DEBUGMSGTL(("$name", "Initializing\n"));

    /* register ourselves with the agent to handle our mib tree */
    REGISTER_MIB("$name", ${name}_variables, _variable$maxoid, ${name}_variables_oid);

    /* place any other initialization junk you need here */
}

void
shutdown_mib_$name(void)
{
	oid myoid[MAX_OID_LEN];
	size_t length;
	int i, result;
	int numvars = sizeof(${name}_variables)/sizeof(struct _variable$maxoid);
	int mibloclen = sizeof(${name}_variables_oid)/sizeof(oid);
	for(i = 0; i < numvars; i++){
		memcpy(myoid, ${name}_variables_oid, mibloclen * sizeof(oid));
		memcpy(myoid + mibloclen, ${name}_variables[i].name, ${name}_variables[i].namelen * sizeof(oid));
		length = mibloclen + ${name}_variables[i].namelen;
		result = unregister_mib(myoid, length);
		if(result != MIB_UNREGISTERED_OK)
			snmp_log(LOG_ERR, "%s: unregister failed:%d\n", __FUNCTION__, result);
	}
}
